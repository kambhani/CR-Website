<title>Clan {{tag}} | Current River Race</title>

<nav aria-label="breadcrumb" class="justify-content-between d-flex mb-3" style="background-color: #e9ecef; height: 48px;">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/" style="text-decoration: none;">Home</a></li>
    <li class="breadcrumb-item"><a href="/clans" style="text-decoration: none;">Clans</a></li>
    <li class="breadcrumb-item"><a href="/clans/{{removeFirstCharacter tag}}" style="text-decoration: none;">{{tag}}</a></li>
    <li class="breadcrumb-item"><a href="/clans/{{removeFirstCharacter tag}}/war" style="text-decoration: none;">War</a></li>
    <li class="breadcrumb-item active" aria-current="page" id="breadcrumb_tag">Race</li>
  </ol>
  <a href="/clans/{{removeFirstCharacter tag}}/data" class="text-decoration-none text-right mx-3 align-middle d-none d-lg-block" style="line-height: 48px;">RAW DATA</a>
</nav>

{{> _clanInfoTabs active="war" tag=tag}}

<hr class="my-0" style="background-color: black; height: 3px; width: 100%;">

{{> _clanInfoWarTabs active="currentWar" tag=tag}}

<div class="tab-content">
  <div class="tab-pane active my-4" id="currentWar" role="tabpanel" aria-labelledby="current-war-tab">
    <div class="container-fluid">
      <div class="row justify-content-center">
        {{#each currentRiverRace.clans}}
          {{> _riverRace clan=this base="currentRiverRace" startTime="" rank="" trophyChange=""}}
        {{/each}}
      </div>
    </div>
  </div>
</div>

<script>
  // Initialize bootstrap tooltips
  $(function() {
    $('[data-bs-toggle="tooltip"]').tooltip({
      html: true
    });
  });

  // This makes the background of hoverable cards a different color when they are hovered over
  $(".hover-card").mouseover(function() {
    $(this).css("background-color", "#eeeeee");
  });
  $(".hover-card").mouseout(function() {
    $(this).css("background-color", "ghostwhite");
  });

  // Dropdown Menu JS (with sorting)
  $(".dropdown-item").on("click", function(e) {
    let selectedText = $(this).text();
    let parentButton = $(this).parent().parent().children("button");
    if (parentButton.text() !== selectedText) {
      parentButton.text(selectedText);
      let parentDropdown = $(this).parent().parent().get(0);
      let dropdowns = $(this).parent().parent().parent().children();
      let sortOrder, sortType;
      dropdowns.each(function(index) {
        if (index === 0) {
          sortType = $(this).children("button").text();
        } else {
          sortOrder = $(this).children("button").text();
        }
      });
      if (!dropdowns.get(0).innerText.includes("Sort Type") && !dropdowns.get(1).innerText.includes("Sort Order")) {
        let toSort = $(this).parent().parent().parent().parent().children(".sortable");
        switch (sortType) {
          case ("Name"): {
            if (sortOrder === "Ascending") {
              toSort.html(toSort.children().sort(function (a, b) {
                return $(a).find(".card-title").text().toUpperCase() > $(b).find(".card-title").text().toUpperCase();
              }));
            } else {
              toSort.html(toSort.children().sort(function (a, b) {
                return $(a).find(".card-title").text().toUpperCase() < $(b).find(".card-title").text().toUpperCase();
              }));
            }
            break;
          }
          case ("Tag"): {
            if (sortOrder === "Ascending") {
              toSort.html(toSort.children().sort(function (a, b) {
                return $(a).find(".card-subtitle").text() > $(b).find(".card-subtitle").text();
              }));
            } else {
              toSort.html(toSort.children().sort(function (a, b) {
                return $(a).find(".card-subtitle").text() < $(b).find(".card-subtitle").text();
              }));
            }
            break;
          }
          case ("Fame"): {
            toSort.html(toSort.children().sort(function (a, b) {
              let num1 = parseInt($(a).find(".participant-fame").text());
              let num2 = parseInt($(b).find(".participant-fame").text());
              return numberComparator(num1, num2, sortOrder);
            }));
            break;
          }
          case ("Repair Points"): {
            toSort.html(toSort.children().sort(function (a, b) {
              let num1 = parseInt($(a).find(".participant-repair-points").text());
              let num2 = parseInt($(b).find(".participant-repair-points").text());
              return numberComparator(num1, num2, sortOrder);
            }));
            break;
          }
          case ("Boat Attacks"): {
            toSort.html(toSort.children().sort(function (a, b) {
              let num1 = parseInt($(a).find(".participant-boat-attacks").text());
              let num2 = parseInt($(b).find(".participant-boat-attacks").text());
              return numberComparator(num1, num2, sortOrder);
            }));
            break;
          }
        }
        // Moving cards around destroys the event listeners associated with them
        // To counteract this, I need to add the event listeners again after the cards have been sorted
        $(".hover-card").mouseover(function() {
          $(this).css("background-color", "#eeeeee");
        });
        $(".hover-card").mouseout(function() {
          $(this).css("background-color", "ghostwhite");
        });
      }
    }
  });

  // Useful helper functions
  function numberComparator(num1, num2, sortOrder) {
    if (num1 < num2) {
      return (sortOrder === "Ascending") ? -1 : 1;
    } else if (num1 > num2) {
      return (sortOrder === "Ascending") ? 1 : -1;
    } else {
      return 0;
    }
  }
</script>

